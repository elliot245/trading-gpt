name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to tag and release (e.g., 0.31.2)'
        required: true
        type: string

env:
  IMAGE_NAME: ${{ github.repository }}

jobs:
  create-tag:
    if: ${{ github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      tag_created: ${{ steps.create-tag.outputs.tag_created }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate version format
        run: |
          if [[ ! "${{ github.event.inputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Version must be in format x.y.z (e.g., 0.31.2)"
            exit 1
          fi

      - name: Check if tag already exists
        run: |
          if git tag | grep -q "^v${{ github.event.inputs.version }}$"; then
            echo "Error: Tag v${{ github.event.inputs.version }} already exists"
            exit 1
          fi


      - name: Create and push tag
        id: create-tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git tag -a "v${{ github.event.inputs.version }}" -m "release v${{ github.event.inputs.version }}"
          git push origin "v${{ github.event.inputs.version }}"
          
          echo "tag_created=true" >> $GITHUB_OUTPUT
          echo "âœ… Created and pushed tag v${{ github.event.inputs.version }}"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.event.inputs.version }}
          release_name: Release v${{ github.event.inputs.version }}
          body: |
            ## What's Changed
            
            Release v${{ github.event.inputs.version }}
            
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ github.event.inputs.version }}...v${{ github.event.inputs.version }}
          draft: false
          prerelease: false

  build-and-push:
    runs-on: ubuntu-latest
    needs: [create-tag]
    if: ${{ always() && (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && needs.create-tag.outputs.tag_created == 'true')) }}
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          ref: ${{ github.event_name == 'workflow_dispatch' && format('v{0}', github.event.inputs.version) || '' }}

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Build binary
        run: make build-linux

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            ${{ github.event_name == 'workflow_dispatch' && format('type=raw,value=v{0}', github.event.inputs.version) || '' }}

      - name: Debug - Show generated tags
        run: |
          echo "Generated tags:"
          echo "${{ steps.meta.outputs.tags }}"
          echo "Generated labels:"
          echo "${{ steps.meta.outputs.labels }}"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
